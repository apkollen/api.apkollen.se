// Copyright 2022 Emil Jonathan Eriksson
//
//
// This file is part of apkapi-ts.
//
// apkapi-ts is free software: you can redistribute it and/or modify it under the terms of the
// GNU Affero General Public License as published by the Free Software Foundation, version 3.
//
// apkapi-ts is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License along with apkapi-ts.
// If not, see <https://www.gnu.org/licenses/>.
//
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model BsProduct {
  articleNbr             Int                         @id @default(autoincrement()) @map("article_nbr")
  url                    String
  productName            String                      @map("product_name")
  category               String
  subcategory            String
  latestHistoryEntryDate DateTime?                   @map("latest_history_entry_date")
  latestHistoryEntry     BsProductHistoryEntry?      @relation("bs_product_article_nbr_latest_history_entry_dateTobs_product_history_entry", fields: [articleNbr, latestHistoryEntryDate], references: [articleNbr, retrievedDate], onDelete: NoAction, onUpdate: NoAction)
  history                BsProductHistoryEntry[]
  review                 BsProductReview?
  markedDeadHistory      DeadBsProductHistoryEntry[] @relation("bs_productTodead_bs_product_history_entry")
  currentRank            CurrentBsProductRank?

  @@index([category, subcategory], map: "idx_product_categories")
  @@index([productName], map: "idx_product_names")
  @@map("bs_product")
}

model BsProductHistoryEntry {
  unitVolume                                                                            Float       @map("unit_volume")
  unitPrice                                                                             Float       @map("unit_price")
  alcvol                                                                                Float
  apk                                                                                   Float
  articleNbr                                                                            Int         @map("bs_product_article_nbr")
  retrievedDate                                                                         DateTime    @default(now()) @map("retrieved_date")
  product                                                                               BsProduct   @relation(fields: [articleNbr], references: [articleNbr], onDelete: NoAction, onUpdate: NoAction)
  bs_product_bs_product_article_nbr_latest_history_entry_dateTobs_product_history_entry BsProduct[] @relation("bs_product_article_nbr_latest_history_entry_dateTobs_product_history_entry") /// Unused, required internally by prisma

  @@id([articleNbr, retrievedDate])
  @@index([alcvol, unitVolume, unitPrice], map: "idx_product_histories")
  @@index([apk], map: "idx_product_history_apk")
  @@map("bs_product_history_entry")
}

model BsProductReview {
  articleNbr        Int       @id @default(autoincrement()) @map("bs_product_article_nbr")
  score             Float     @map("review_score")
  text              String    @map("review_text")
  reviewerName      String    @map("reviewer_name")
  reviewCreatedDate DateTime  @default(now()) @map("review_created_date")
  product           BsProduct @relation(fields: [articleNbr], references: [articleNbr], onDelete: NoAction, onUpdate: NoAction)

  @@map("bs_product_review")
}

model DeadBsProductHistoryEntry {
  articleNbr        Int       @map("bs_product_article_nbr")
  markedDeadDate    DateTime  @default(now()) @map("marked_dead_date")
  markedRevivedDate DateTime? @map("marked_revived_date")
  product           BsProduct @relation("bs_productTodead_bs_product_history_entry", fields: [articleNbr], references: [articleNbr], onDelete: NoAction, onUpdate: NoAction)

  @@id([articleNbr, markedDeadDate])
  @@map("dead_bs_product_history_entry")
}

// Views, to be manually updated

model CurrentBsProductRank {
  articleNbr  Int        @id @map("bs_product_article_nbr")
  currentRank Int        @unique @map("current_rank")
  product     BsProduct? @relation(fields: [articleNbr], references: [articleNbr])

  @@map("current_bs_product_rank")
}
